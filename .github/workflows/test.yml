name: Test

on: [ push, pull_request ]

jobs:
  caching:
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            label: linux-64
            prefix: /usr/share/miniconda3/envs/my-env
    # For later compatibility with Windows and macOS:
    #          - os: macos-latest
    #            label: osx-64
    #            prefix: /Users/runner/miniconda3/envs/my-env
    #
    #          - os: windows-latest
    #            label: win-64
    #            prefix: C:\Miniconda3\envs\my-env

    name: Cache for ${{ matrix.label }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: OSMnxPyrLab
          use-mamba: true

      - name: Set cache date
        id: get-date
        run: echo "today=$(/bin/date -u '+%Y%m%d')" >> $GITHUB_OUTPUT
        shell: bash

      - name: Show environment info
        run: |
          conda info
          conda list

      - name: Cache Conda env
        uses: actions/cache@v2
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}--${{ runner.arch }}--${{
            steps.get-date.outputs.today }}-${{
            hashFiles('environment.yml') }}-${{ env.CACHE_NUMBER}}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0
        id: cache

      - name: Update environment
        run: # Install if cache not found
          mamba env update -n OSMnxPyrLab -f environment.yml
        if: steps.cache.outputs.cache-hit != 'true'

  run-tests:
    needs: caching
    runs-on: ubuntu-latest

    strategy:
      matrix:
        submodule:
          - { name: "Metrics", pytest_args: "tests/metrics/" }
          - { name: "Approaches", pytest_args: "tests/partitioning/approaches/" }
          - { name: "Partitioning Base", pytest_args: "tests/partitioning/test_base.py" }
          - {
            name: "Partitioning Rest",
            pytest_args: "tests/partitioning/ --ignore=tests/partitioning/approaches/ --ignore=tests/partitioning/test_base.py"
          }
          - { name: "Attribute", pytest_args: "tests/test_attribute.py" }
          - { name: "Plot", pytest_args: "tests/test_plot.py" }
          - { name: "Utils", pytest_args: "tests/test_utils.py" }

    name: "Test ${{ matrix.submodule.name }}"
    defaults:
      run:
        shell: bash -el {0}

    steps:
      - uses: actions/checkout@v2

      - name: Use cache for ${{ matrix.submodule.name }}
        uses: actions/cache@v2
        with:
          path: ${{ env.CONDA }}/envs
          key:
            conda-${{ runner.os }}--${{ runner.arch }}--${{
            steps.get-date.outputs.today }}-${{
            hashFiles('environment.yml') }}-${{ env.CACHE_NUMBER}}
        env:
          # Increase this value to reset cache if etc/example-environment.yml has not changed
          CACHE_NUMBER: 0

      - name: Setup Mambaforge
        uses: conda-incubator/setup-miniconda@v2
        with:
          miniforge-variant: Mambaforge
          miniforge-version: latest
          activate-environment: OSMnxPyrLab
          use-mamba: true

      - name: Update environment
        run: # Install if cache not found
          mamba env update -n OSMnxPyrLab -f environment.yml
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Show environment info
        run: |
          conda info
          conda list
          conda config --show

      - name: "Run tests ${{ matrix.submodule.name }} with coverage"
        run: |
          pytest --cov=superblockify ${{ matrix.submodule.pytest_args }}
          mv .coverage ".coverage.${{ matrix.submodule.name }}"
        env:
          COVERAGE_FILE: ".coverage.${{ matrix.submodule.name }}"

      - name: Store coverage file
        uses: actions/upload-artifact@v3
        with:
          name: coverage
          path: ".coverage.${{ matrix.submodule.name }}"

  coverage:
    name: Merge Coverage
    runs-on: ubuntu-latest
    needs: run-tests
    permissions:
      pull-requests: write
      contents: write
    steps:
      - uses: actions/checkout@v3

      - name: Merge coverage files
        run: coverage combine

      - name: Coverage comment
        id: coverage_comment
        uses: py-cov-action/python-coverage-comment-action@v3
        with:
          GITHUB_TOKEN: ${{ github.token }}

      - name: Store Pull Request comment to be posted
        uses: actions/upload-artifact@v3
        if: steps.coverage_comment.outputs.COMMENT_FILE_WRITTEN == 'true'
        with:
          name: python-coverage-comment-action
          path: python-coverage-comment-action.txt